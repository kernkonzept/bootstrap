# vim:set ft=make:
# 
# User definable variables for bootstrap:
# - BOOTSTRAP_CHECK_MD5 set this if you want MD5 checks for modules
# - BOOTSTRAP_SEARCH_PATH
# - BOOTSTRAP_ELF_NAME
# - BOOTSTRAP_MODULES_LIST
# - BOOTSTRAP_DO_RAW_IMAGE
# - BOOTSTRAP_DO_UIMAGE
# - BOOTSTRAP_DO_ITB
# - BUILD_PIE  Set to 1 if you want bootstrap to be position independent.
#              Automatically set for UEFI mode (see below). Also enables outer
#              bootstrap on amd64 multiboot to load relocatable image.
# - BOOTSTRAP_DO_UEFI if set to y an image which is bootable by UEFI is built
# - BOOTSTRAP_NO_STRIP if set no stripping of image
# - BOOTSTRAP_UIMAGE_COMPRESSION: set to none, gzip, or bzip2
# - BOOTSTRAP_CMDLINE: compiled-in command line, only used if no cmdline
#                      given
# - BOOTSTRAP_OUTPUT_DIR: Optional alternative output directory for all
#                         images (and generated files), preferable some
#                         tmpfs directory
# - BOOTSTRAP_IMAGE_SUFFIX: Optional string to suffix to image names

INTERNAL_CRT0       := y # the default is to use our internal crt0
DEFAULT_RELOC_arm   := 0x01000000
DEFAULT_RELOC_arm64 := 0x01000000
DEFAULT_RELOC_x86   := 0x002d0000
DEFAULT_RELOC_amd64 := 0x002d0000
DEFAULT_RELOC_mips32:= 0x802d0000
DEFAULT_RELOC_mips64:= 0xffffffff802d0000
DEFAULT_RELOC_mips   = $(DEFAULT_RELOC_mips$(CPU_ABI))
DEFAULT_RELOC_ppc32 := 0x002d0000
DEFAULT_RELOC_riscv32 := 0x00400000
DEFAULT_RELOC_riscv64 := 0x00200000
DEFAULT_RELOC_riscv  = $(DEFAULT_RELOC_riscv$(BITS))
DEFAULT_RELOC_sparc := 0x00800000
RELOC_PHYS          := y
LDFLAGS              = -nostdlib -nocrt $(LDNOWARNRWX)
EXTRA_GENERAL_D_DEP += .redo-change-tracker $(BID_RAM_BASE_DEP) \
		       $(wildcard $(L4DIR)/conf/Makeconf.boot $(OBJ_BASE)/conf/Makeconf.boot) \
		       $(SRC_DIR)/build.pl $(BOOTSTRAP_MODULES_LIST) \
		       $(SRC_DIR)/Makefile.platform $(L4DIR)/tool/lib/L4/Image.pm \
                       $(L4DIR)/tool/bin/l4image
INCLUDE_MAKE_RULES   = $(SRC_DIR)/*/Make.rules
BOOTSTRAP_LD_dep    := $(SRC_DIR)/ldscript.inc

# Use PIE infrastructure where possible
CAN_PIE_arm     := y
CAN_PIE_arm64   := y
CAN_PIE_riscv   := y
BID_CAN_PIE      = $(CAN_PIE_$(ARCH))

# convenience
ifneq ($(E),)
ENTRY       := $(E)
endif

ifneq ($(BOOTSTRAP_CHECK_MD5),)
  REQUIRES_LIBS       += libbsd-lite
  DEFINES             += -DDO_CHECK_MD5
endif

INCLUDE_BOOT_CONFIG := required

include $(L4DIR)/mk/Makeconf
-include $(OBJ_DIR)/Makeconf.local
include $(SRC_DIR)/Makefile.platform

ifeq ($(IS_EFI_$(ARCH)-$(PLATFORM_TYPE)),y)
  BOOTSTRAP_DO_UEFI := y
endif

ifeq ($(BOOTSTRAP_DO_UEFI),y)
  # link to 0x0
  DEFAULT_RELOC_x86   := 0x0
  DEFAULT_RELOC_amd64 := 0x0

  BUILD_PIE           := 1

  REQUIRES_LIBS       += gnu-efi
  EFI_IMAGE-amd64     := bootx64.efi
  EFI_IMAGE-x86       := bootia32.efi
  EFI_IMAGE-arm64     := bootaa64.efi
  EFI_IMAGE           := $(EFI_IMAGE-$(ARCH))
  EFI_ARCH-amd64      := x86_64
  EFI_ARCH-x86        := ia32
  EFI_ARCH-arm64      := aarch64
  EFI_ARCH            := $(EFI_ARCH-$(ARCH))
  EFI_BIN_FMT         := efi-app-$(EFI_ARCH)
  CRTN_dyn_bin        :=
  CRTEND_dyn_bin      :=
  # Use crt0 provided by the gnu-efi lib via PC_EXTRA.
  INTERNAL_CRT0       := n
  CXXFLAGS            += -fshort-wchar
  CFLAGS              += -fshort-wchar
  DEFINES             += -DGNU_EFI_USE_MS_ABI
  LDFLAGS             += --no-gc-sections
else
  BOOTSTRAP_DO_MB2 := y
endif

BOOTSTRAP_SEARCH_PATH        ?= $(OBJ_DIR)
BOOTSTRAP_MODULES_LIST       ?= $(SRC_DIR)/modules.list
BOOTSTRAP_MODULE_PATH_BINLIB ?= $(OBJ_BASE)/bin/$(subst -,/,$(SYSTEM)):$(OBJ_BASE)/lib/$(subst -,/,$(SYSTEM))
BOOTSTRAP_ELF_NAME           ?= bootstrap.elf
MKIMAGE                      ?= mkimage
MKIMAGE_PRESENT              := $(if $(shell command -v $(MKIMAGE)),y)
BOOTSTRAP_UIMAGE_COMPRESSION ?= none

ifneq ($(ENTRY),)
od := $(if $(BOOTSTRAP_OUTPUT_DIR),$(if $(wildcard $(BOOTSTRAP_OUTPUT_DIR)),,$(shell mkdir -p $(BOOTSTRAP_OUTPUT_DIR))))
od := $(if $(BOOTSTRAP_OUTPUT_DIR),$(BOOTSTRAP_OUTPUT_DIR)/)
else
override BOOTSTRAP_OUTPUT_DIR :=
endif

PRIVATE_INCDIR	 = $(SRC_DIR) $(SRC_DIR)/ARCH-$(ARCH)

ifeq ($(ARCH),amd64)
  TARGET        := $(od)bootstrap64.elf
else
  TARGET        := $(od)$(BOOTSTRAP_ELF_NAME)
endif

MODE		 = sigma0

BOOTSTRAP_RAW     ?= $(od)bootstrap.raw
BOOTSTRAP_UIMAGE  ?= $(od)bootstrap.uimage
BOOTSTRAP_ITB     ?= $(od)bootstrap.itb

ifneq ($(DEFAULT_RELOC_$(ARCH)-$(PLATFORM_TYPE)),)
DEFAULT_RELOC_$(ARCH) := $(DEFAULT_RELOC_$(ARCH)-$(PLATFORM_TYPE))
endif

INTERNAL_CRT0 := $(strip $(INTERNAL_CRT0))

CXXFLAGS        += -fno-threadsafe-statics

CFLAGS_arm64    += -mstrict-align
CXXFLAGS_arm64  += -mstrict-align
CFLAGS_arm      += -mno-unaligned-access
CXXFLAGS_arm    += -mno-unaligned-access

SRC_C           += memcpy_aligned.c
CFLAGS_memcpy_aligned.c = -ffreestanding

SRC_CC		+= exec.cc module.cc region.cc startup.cc init_kip.cc \
		   libc_support+.cc koptions.cc \
		   memory.cc boot_modules.cc mod_info.cc
SRC_CC-$(BOOTSTRAP_DO_UEFI) += efi-support.cc

SRC_CC_x86	+= ARCH-x86/reboot.cc base_critical.cc
SRC_CC_x86-$(BOOTSTRAP_DO_MB2) += multiboot2.cc
SRC_CC_amd64	+= ARCH-x86/reboot.cc base_critical.cc \
		   ARCH-amd64/cpu_info.cc ARCH-amd64/paging.cc \
		   ARCH-amd64/paging_alloc.cc
SRC_CC_arm     	+= ARCH-arm/reboot.cc ARCH-arm/head.cc ARCH-arm/platform.cc platform_common-arm.cc
SRC_CC_arm64   	+= ARCH-arm/reboot.cc ARCH-arm64/platform.cc platform_common-arm.cc
SRC_CC_arm64-$(BOOTSTRAP_DO_UEFI)  += ARCH-arm64/efi.cc
SRC_CC_arm64-y$(BOOTSTRAP_DO_UEFI) += ARCH-arm64/head.cc
SRC_CC_mips    	+= ARCH-mips/reboot.cc ARCH-mips/head.cc \
		   ARCH-mips/cpu.cc
SRC_CC_ppc32    += ARCH-ppc32/init_kip_v2-arch.cc \
		   ARCH-ppc32/reboot.cc ARCH-ppc32/head.cc
SRC_CC_riscv    += ARCH-riscv/reboot.cc ARCH-riscv/head.cc \
                   ARCH-riscv/platform_riscv.cc dt.cc
SRC_CC_sparc	+= ARCH-sparc/reboot.cc ARCH-sparc/head.cc
SRC_CC          += $(SUPPORT_CC_$(ARCH)-$(PLATFORM_TYPE))

SRC_S-$(INTERNAL_CRT0) += ARCH-$(ARCH)/crt0.S $(SUPPORT_CRT0_$(ARCH)-$(PLATFORM_TYPE))
SRC_S_arm64-$(BOOTSTRAP_DO_UEFI) += ARCH-arm64/cache.S
SRC_S_x86-$(INTERNAL_CRT0) += ARCH-x86/mb2.S

OPTS             = -g -Os
DEFINES         += -DRAM_BASE=$(RAM_BASE) -DL4_MINIMAL_LIBC=1
DEFINES         += -DCMDLINE="\"$(BOOTSTRAP_CMDLINE)\""
DEFINES         += -DPLATFORM_TYPE=\"$(PLATFORM_TYPE)\"
DEFINES         += -DPLATFORM_TYPE_$(PLATFORM_TYPE)
DEFINES         += -DPLATFORM_UART_NR=$(PLATFORM_UART_NR)
DEFINES         += -DCPU_ABI=$(CPU_ABI)
DEFINES_$(ARCH) += $(DEFINES_$(ARCH)-$(PLATFORM_TYPE))

MOD_ADDR         = 0x02000000

CPPFLAGS        += $(CPPFLAGS_$(ARCH)-$(PLATFORM_TYPE))
CPPFLAGS        += $(BID_PKG_CONFIG_CFLAGS)

ifeq ($(filter clean cleanall,$(MAKECMDGOALS)),)
ifeq ($(SUPPORT_CC_$(ARCH)-$(PLATFORM_TYPE)),)
  $(info ERROR: PLATFORM_TYPE=$(PLATFORM_TYPE) has no assigned platform support file)
  $(info ERROR: A proper PLATFORM_TYPE must be set for a build)
  $(error .)
endif
endif

REQUIRES_LIBS_arm   += libfdt
REQUIRES_LIBS_arm64 += libfdt
REQUIRES_LIBS_ppc32 += drivers_of
REQUIRES_LIBS_riscv += libfdt
REQUIRES_LIBS       += drivers_uart libc_minimal cxx_base cxx_io

ifeq ($(BOOTSTRAP_DO_UEFI)-$(ARCH),y-arm64)
LDSCRIPT	 = bootstrap.efi.ld
else
LDSCRIPT	 = bootstrap.ld
endif

vpath bootstrap%.ld.in $(SRC_DIR)/ARCH-$(ARCH)

# can be overwritten by Makeconf.local
BUILD_PIE	?= 0

ifeq ($(BUILD_PIE),1)
CFLAGS            += -fpie
CXXFLAGS          += -fpie
LDFLAGS           += -pie -Bsymbolic --no-dynamic-linker
LDFLAGS           += -z text
else
LDFLAGS           += -static -Bstatic
endif

ENTRY_FN := $(shell echo "$(ENTRY)" | tr '[ ]' '[_]' )
SUFFIX := $(if $(BOOTSTRAP_IMAGE_SUFFIX),$(ENTRY_FN)_$(BOOTSTRAP_IMAGE_SUFFIX),$(ENTRY_FN))

BOOTSTRAP_LINKADDR = $(firstword $(call default_reloc,$(od)bootstrap.elf))

BUILD_MOD_CMD_ENVVARS = CC="$(CC)" LD="$(LD)" \
                        CROSS_COMPILE=$(CROSS_COMPILE) \
                        MAKE_INC_FILE=$(PWD)/mod.make.inc \
                        FLAGS_CC="$(CARCHFLAGS) $(CCXX_FLAGS) -I$(SRC_DIR)" \
                        OUTPUT_DIR="$(od)" \
                        OPT_ARCH=$(ARCH) \
                        CAN_DECOMPRESS=$(CONFIG_BOOTSTRAP_COMPRESS) \
                        L4DIR=$(L4DIR) \
                        BOOTSTRAP_LINKADDR=$(BOOTSTRAP_LINKADDR) \
                        OPT_RAM_BASE=$(RAM_BASE) \
                        OPT_EFIMODE=$(if $(BOOTSTRAP_DO_UEFI),y,n) \
                        OPT_PLATFORM_TYPE=$(PLATFORM_TYPE) \
                        OPT_BITS=$(BITS) \
                        QEMU_BINARY_NAME="$(QEMU_BINARY_NAME)" \
                        QEMU_OPTIONS="$(QEMU_OPTIONS)"

ifneq ($(ENTRY),)
 ifeq ($(filter clean cleanall,$(MAKECMDGOALS)),)
  BUILD_MOD_CMD = ( SEARCHPATH="$(BOOTSTRAP_SEARCH_PATH):$(BOOTSTRAP_MODULE_PATH_BINLIB)" \
                    $(BUILD_MOD_CMD_ENVVARS) \
                    $(SRC_DIR)/build.pl $(1) $(BOOTSTRAP_MODULES_LIST) "$(ENTRY)" || \
                    (echo "processing-of-module-list-failed"; exit 1))
 endif
endif


# we need to re-do if some things change
.redo-change-tracker: FORCE
	$(VERBOSE)echo "$(ENTRY) '$(BOOTSTRAP_CMDLINE)' '$(BOOTSTRAP_SEARCH_PATH):$(BOOTSTRAP_MODULE_PATH_BINLIB)' '$(RAM_SIZE_MB)' '$(PLATFORM_TYPE)' '$(PLATFORM_UART_NR)' '$(od)' '$(OPT_STRIP)' '$(call default_reloc,$(ARCH))' '$(BOOTSTRAP_DO_UEFI)'" > $@.tmp
	$(if $(BUILD_MOD_CMD),$(VERBOSE)$(call BUILD_MOD_CMD,dump) >> $@.tmp)
	$(VERBOSE)$(call move_if_changed,$@,$@.tmp)


INSTALL_FILES += $(INSTALL_FILES-y)

ifneq ($(ENTRY),)

INSTALL_FILES  += $(BOOTSTRAP_ELF_NAME) bootstrap_$(SUFFIX) bootstrap_$(SUFFIX).elf
BOOTSTRAP_LINK_SOURCE = $(BOOTSTRAP_ELF_NAME)

INSTALL_FILES-$(BOOTSTRAP_DO_UEFI) += bootstrap_$(SUFFIX).efi $(EFI_IMAGE)

$(od)bootstrap_$(SUFFIX): $(od)$(BOOTSTRAP_LINK_SOURCE)
	$(VERBOSE)$(LN) -f $< $@

$(od)bootstrap_$(SUFFIX).elf: $(od)$(BOOTSTRAP_LINK_SOURCE)
	$(VERBOSE)$(LN) -f $< $@

$(od)bootstrap_$(SUFFIX).elf32: $(od)$(BOOTSTRAP_LINK_SOURCE)
	$(VERBOSE)$(LN) -f $< $@

$(od)bootstrap_$(SUFFIX).efi: $(od)$(EFI_IMAGE)
	$(VERBOSE)$(LN) -f $< $@

$(od)bootstrap_$(SUFFIX).%: $(od)bootstrap.%
	$(VERBOSE)$(LN) -f $< $@

 ifeq ($(ARCH),$(filter $(ARCH),arm arm64 ppc32 mips riscv))
   BID_POST_PROG_LINK_MSG_$(od)$(BOOTSTRAP_ELF_NAME) = echo -e "  ==> Post-processing $@"
   BID_POST_PROG_LINK_$(od)$(BOOTSTRAP_ELF_NAME)     = \
      $(VERBOSE)LC_ALL=C $(NM) -C $@ | \
        LC_ALL=C $(GREP) -E ' . __PLATFORMS_(BEGIN|END)$$' | \
                (read a i; read b i; \
                 if [ "$$a" = "$$b" ]; then \
                   echo -e "\nERROR: Missing at least one platform instantiation.\n"; \
                   $(RM) $@; \
                   exit 1; \
                 fi ) || exit 1; \
      $(if $(BOOTSTRAP_NO_STRIP),,$(STRIP) $@)

   ifneq ($(BOOTSTRAP_DO_RAW_IMAGE)$(BOOTSTRAP_DO_UIMAGE)$(BOOTSTRAP_DO_ITB),)
     INSTALL_FILES      += bootstrap.raw bootstrap_$(SUFFIX).raw
     ifneq ($(BOOTSTRAP_DO_UIMAGE)$(BOOTSTRAP_DO_ITB),)
       ifeq ($(MKIMAGE_PRESENT),y)
         ifneq ($(BOOTSTRAP_DO_UIMAGE),)
           INSTALL_FILES    += bootstrap.uimage bootstrap_$(SUFFIX).uimage
         else
           INSTALL_FILES    += bootstrap.itb bootstrap_$(SUFFIX).itb
         endif
       else
         $(error mkimage($(MKIMAGE)) host tool missing, cannot build bootstrap.uimage/itb)
       endif
     endif
   endif
 endif

all:: $(addprefix $(IMAGES_DIR)/,$(INSTALL_FILES))
	$(VERBOSE)echo "  Image size(s) in bytes:"
	$(VERBOSE)for f in $(filter bootstrap_$(SUFFIX).elf bootstrap.raw bootstrap.uimage bootstrap.itb, $(INSTALL_FILES)); do \
	  find $(if $(od),$(od),.) -name $$f -printf " %30f:  %s\n"; \
	done
	$(if $(LDFLAGS_$(od)bootstrap.elf),$(VERBOSE)echo "  Start address: $(BOOTSTRAP_LINKADDR)")
	$(VERBOSE)echo "  --> Build-Nr: $$(cat .build_nr)"

# install images into easy to reach directory in build dir
$(IMAGES_DIR)/%: $(od)%
	$(VERBOSE)echo "  ==> Installing $< in image directory"
	$(VERBOSE)(cd $(dir $@) && $(LN) -sf $(if $(od),,$(PWD)/)$<)

else
  INSTALL_FILES += bootstrap $(BOOTSTRAP_ELF_NAME) $(BOOTSTRAP_RAW)

  ifneq ($(EFI_IMAGE),)
$(od)bootstrap.efi: $(od)$(EFI_IMAGE)
	$(VERBOSE)$(LN) -f $< $@

    INSTALL_FILES-$(BOOTSTRAP_DO_UEFI) += bootstrap.efi
  endif

  ifeq ($(ARCH),$(filter $(ARCH),arm arm64 ppc32 mips riscv))
    ifeq ($(MKIMAGE_PRESENT),y)
      INSTALL_FILES += $(BOOTSTRAP_UIMAGE) $(BOOTSTRAP_ITB)
    else
      $(warning mkimage($(MKIMAGE)) host tool missing, cannot build bootstrap.uimage/itb)
    endif
  endif
endif # ENTRY

SRC_CC-$(CONFIG_BOOTSTRAP_COMPRESS) += uncompress.cc
REQUIRES_LIBS-$(CONFIG_BOOTSTRAP_COMPRESS) += zlib

ifneq ($(RAM_SIZE_MB),)
CPPFLAGS	+= -DRAM_SIZE_MB=$(RAM_SIZE_MB)
endif

CXXFLAGS += -fno-rtti -fno-exceptions
CXXFLAGS += $(call checkcxx,-fno-threadsafe-statics)

ifneq ($(BUILD_MOD_CMD),)
 ifeq ($(filter clean cleanall,$(MAKECMDGOALS)),)

processing-of-module-list-failed:
	@echo
	@echo "  Processing of entry $(ENTRY) in $(BOOTSTRAP_MODULES_LIST) failed!"
	@echo
	@exit 1

build_list_cmd := $(if $(MAKE_RESTARTS),list_unique,fetch_files_and_list_unique)
entry_files    := $(shell $(call BUILD_MOD_CMD,$(build_list_cmd)))

# Avoid that pattern rules match on module files
$(filter-out processing-of-module-list-failed,$(entry_files)): ;

mod.make.inc $(od)mbi_modules.o: $(GENERAL_D_LOC) $(entry_files)
	@echo Building entry \""$(ENTRY)"\".
	$(VERBOSE)$(call BUILD_MOD_CMD,build)

  -include mod.make.inc
  BOOTSTRAP_LD_dep             += mod.make.inc
  STARTUP_C_dep                := mod.make.inc
  OBJS                         += $(MODULE_OBJECT_FILES)
 endif

 CPPFLAGS                     += -DIMAGE_MODE
else
mod.make.inc $(od)mbi_modules.o: $(GENERAL_D_LOC) \
                                 $(BOOTSTRAP_BUILD_OUTPUT_FORMATTER)
	$(VERBOSE)$(BUILD_MOD_CMD_ENVVARS) $(SRC_DIR)/build.pl build

  -include mod.make.inc
  BOOTSTRAP_LD_dep             += mod.make.inc
  STARTUP_C_dep                := mod.make.inc
  OBJS                         += $(MODULE_OBJECT_FILES)

  # We need the default images to be ready for image mode on these architectures
  # as they are populated using the l4image tool.
  ifeq ($(ARCH),$(filter $(ARCH),arm arm64 ppc32 mips riscv))
    CPPFLAGS                   += -DIMAGE_MODE
  endif
endif

CPPFLAGS	+= -DMODADDR=$(MOD_ADDR)

all:: $(BOOTSTRAP_RAW)

# raw version without ELF, primarily useful for ARM
$(BOOTSTRAP_RAW): $(BOOTSTRAP_ELF_NAME)
	@$(GEN_MESSAGE)
	$(VERBOSE)$(OBJCOPY) -O binary $< $@
	$(VERBOSE)chmod -x $@

%.gzip: %
	gzip -c9 $^ > $@

%.bzip2: %
	bzip2 -c9 $^ > $@

%.none: %
	ln -sf $^ $@

MKIMAGE_ARCH-$(ARCH) = $(ARCH)
MKIMAGE_ARCH-ppc32   = ppc
MKIMAGE_ARCH-mips    = $(if $(filter "64",$(CONFIG_CPU_ABI)),mips64,mips)

MKIMAGE_ARCH = $(MKIMAGE_ARCH-$(ARCH))

BID_POST_PROG_LINK_MSG_$(TARGET) = echo -e "  [$(PKGNAME_DIRNAME)] ==> Image post-processing $@"
BID_POST_PROG_LINK_$(TARGET)     = $(VERBOSE)L4DIR=$(L4DIR) $(SRC_DIR)/build.pl postprocess $@

# u-boot images, based on raw-version
$(BOOTSTRAP_UIMAGE): $(BOOTSTRAP_RAW).$(BOOTSTRAP_UIMAGE_COMPRESSION)
	@$(GEN_MESSAGE)
	@# mkimage writes the same file which does not play well with hardlinks
	$(VERBOSE)$(RM) -f $@
	$(VERBOSE)$(MKIMAGE) -e $(call default_reloc,$(ARCH)) \
	   -a $(call default_reloc,$(ARCH)) -A $(MKIMAGE_ARCH)  \
	   -C $(BOOTSTRAP_UIMAGE_COMPRESSION) \
	   -n "L4Re Image #$$(cat .build_nr)" \
	   -d $^ $@

$(BOOTSTRAP_ITB): $(BOOTSTRAP_RAW)
	@$(GEN_MESSAGE)
	@# mkimage writes the same file which does not play well with hardlinks
	$(VERBOSE)$(RM) -f $@
	$(VERBOSE)$(MKIMAGE) -f auto -e $(call default_reloc,$(ARCH)) \
	   -a $(call default_reloc,$(ARCH)) -A $(MKIMAGE_ARCH)  \
	   -C $(BOOTSTRAP_UIMAGE_COMPRESSION) \
	   -n "L4Re Image #$$(cat .build_nr)" \
	   -d $^ $@ \
	   $(if $(BOOTSTRAP_ITB_DTB),-b $(BOOTSTRAP_ITB_DTB))

$(TARGET): $(LDSCRIPT) $(OBJS_$(TARGET))


increment_build_nr = \
   $(shell if [ -e .build_nr ]; then            \
	     nr=$$(($$(cat .build_nr) + 1));    \
	   else                                 \
	     nr=1;                              \
	   fi;                                  \
	   echo $$nr > .build_nr; echo $$nr)


startup.o: $(STARTUP_C_dep)
CPPFLAGS_startup.cc += -DBUILD_DATE="\"$(shell LC_ALL=C date)\"" -DBUILD_NR=\"$(call increment_build_nr)\"
CPPFLAGS_boot_modules.cc += -DLINKADDR=$(strip $(call default_reloc,$(ARCH)))

%.ld: %.ld.in $(GENERAL_D_LOC) $(BOOTSTRAP_LD_dep)
	@$(GEN_MESSAGE)
	$(VERBOSE)$(MKDIR) $(@D)
	$(VERBOSE)$(CPP) -P $(CPPFLAGS) -DLINKADDR=$(strip $(call default_reloc,$(ARCH))) $< -o $@

clean::
	$(VERBOSE)$(RM) mod.make.inc mod*.bin mbi_modules.bin $(LDSCRIPT)
	$(VERBOSE)$(RM) mod*.bin
	$(VERBOSE)$(RM) $(SRC32_C:.c=.o32) $(SRC32_CC:.cc=.o32) $(SRC32_S:.S=.o32)
	$(VERBOSE)$(RM) .redo-change-tracker

cleanall::
	$(VERBOSE)$(RM) $(od)bootstrap_* $(od)bootstrap.*

$(od)boot%.efi: $(TARGET)
	$(VERBOSE)$(OBJCOPY) -S -j .text -j .sdata -j .rodata -j .reloc -j .dynsym \
	                     -j .dynstr -j .rel.dyn -j .data -j .data.m \
	                     -j .dynamic -j .rela -j .rela.dyn -j .rela.plt \
	                     -j .bss -j .module_data \
	                     --target=$(EFI_BIN_FMT) $< $@

ifeq ($(ARCH),amd64)

vpath %.c              $(SRC_DIR)/ARCH-amd64
vpath %.cc             $(SRC_DIR)/ARCH-amd64
vpath %.S              $(SRC_DIR)/ARCH-amd64
vpath %.c              $(SRC_DIR)/ARCH-amd64/boot32
vpath %.S              $(SRC_DIR)/ARCH-amd64/boot32
vpath ARCH-amd64/boot32/bootstrap32.ld.in $(SRC_DIR)
vpath bootstrap%.ld.in $(SRC_DIR)/ARCH-x86

SRC32_C    = boot_cpu.c boot_kernel.c load_elf.c minilibc_support.c support.c \
             cpu_info.c paging.c gcc_lib.c
SRC32_C   += $(if $(filter 1,$(BUILD_PIE)),mm_alloc.c)
SRC32_CC  += $(if $(filter y,$(BOOTSTRAP_DO_MB2)),multiboot2.cc)
SRC32_S    = boot.S boot_idt.S
SRC32_S   += $(if $(filter y,$(BOOTSTRAP_DO_MB2)),ARCH-x86/mb2.S)
OBJ32      = $(SRC32_S:.S=.o32) $(SRC32_C:.c=.o32) $(SRC32_CC:.cc=.o32)
CC32       = $(filter-out -m64, $(CC)) -m32
CXX32      = $(filter-out -m64, $(CXX)) -m32
CC32FLAGS  = $(filter-out -m64, $(CFLAGS) $(CFLAGS_$(ARCH))) -m32 $(GCCNOSTACKPROTOPT)
CXX32FLAGS = $(filter-out -m64, $(CXXFLAGS) $(CXXFLAGS_$(ARCH))) -m32 $(GCCNOSTACKPROTOPT)

$(OBJ_DIR)/ARCH-amd64/libc32/OBJ-$(SYSTEM)/libc32.a: FORCE
	$(VERBOSE)$(MAKE) O=$(OBJ_BASE) -C $(SRC_DIR)/ARCH-amd64/libc32

$(BOOTSTRAP_ELF_NAME): $(OBJ32) bootstrap32.bin ARCH-amd64/boot32/bootstrap32.ld $(OBJ_DIR)/ARCH-amd64/libc32/OBJ-$(SYSTEM)/libc32.a
	@$(LINK_MESSAGE)
	$(VERBOSE)$(CC32) -o $@ -nostdlib -static \
	  -Wl,-T,ARCH-amd64/boot32/bootstrap32.ld,--gc-sections \
          $(filter-out %/bootstrap32.ld,$^) -z noexecstack
	$(VERBOSE)chmod 755 $@

bootstrap32.bin: $(TARGET)
	@$(GEN_MESSAGE)
	$(VERBOSE)$(OBJCOPY) -S $< bootstrap64.bin
	$(VERBOSE)chmod -x bootstrap64.bin
	$(VERBOSE)$(OBJCOPY) -B i386 -I binary -O elf32-i386 bootstrap64.bin $@

clean cleanall::
	$(VERBOSE)PWD=$(abspath $(SRC_DIR)/ARCH-amd64/libc32) \
	  $(MAKE) -C $(SRC_DIR)/ARCH-amd64/libc32 $@
endif

bootstrap: $(BOOTSTRAP_ELF_NAME)
	$(VERBOSE)$(LN) -f $^ $@

INSTALL_TARGET := $(if $(od),,$(INSTALL_FILES))

ifneq ($(BOOTSTRAP_ALL_PLATFORMS)$(BID_CHECKBUILD),)
ifneq ($(PLATFORM_CHECK),y)
all::
	$(VERBOSE)BUILD_FAIL=""; \
	echo "Performing bootstrap build check ..."; \
	for p in $$(sed -En 's/^\[$(OSYSTEM)\] *([^ ]*) --.*/\1/p' $(OBJ_BASE)/Kconfig.generated.platforms.list); do \
		$(MAKE) PT=$$p PLATFORM_CHECK=y BID_MESSAGE_TAG='$(BID_MESSAGE_TAG):'$$p || BUILD_FAIL+="\t$$p\n"; \
	done; \
	[ -z "$${BUILD_FAIL}" ] || ( \
		printf "Bootstrap $(OSYSTEM) build check failed for:\n$${BUILD_FAIL}" && false \
	)
endif
endif

ifeq ($(ARCH),amd64)
DEPS += $(foreach file,$(OBJ32), $(call BID_dot_fname,$(file)).cmd)

include $(L4DIR)/mk/prog.mk

BID_CC32_COMPILER = CC32
BID_CXX32_COMPILER = CXX32

$(eval $(call BID_MAKE_RULE_template,%.o32,%.c,CC32))
$(eval $(call BID_MAKE_RULE_template,%.o32,%.cc,CXX32))
$(eval $(call BID_MAKE_RULE_template,%.o32,%.S,CC32))

$(foreach svar,C CC S,\
  $(foreach src,$(SRC32_$(svar)),\
    $(eval $(call make_per_obj_vars,bootstrap.elf32,$(strip $(call gen_SRC_$(svar)_obj,$(src),))32,$(src))) \
  ) \
)
endif
